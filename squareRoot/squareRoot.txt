===> The square root of 25 is 5
    - best way to find the square root of a number(n) w/o using built-in function:
        - Search for a number from 1 to n - 1 that multiplies by itself to give to give n 
        ====> n * n != n (except 1 ~> edge case)

- using linear method O(N):
    - we start from 1 * 1 to (n - 1) * (n - 1) to get the value of n
    OR 
    - we start from 1 * 1 to any number multiplied by itself to give n 
        - if this already exceeds the value of n, then there is no perfect square root for n 

Example:
===> n = 9
    - 1 x 1 = 1 ===> less than n {proceed}
    - 2 x 2 = 4 ===> less than n {proceed}
    - 3 x 3 = 9 ===> answer {stop operation}

===> n = 14
    - 1 x 1 = 1
    - 2 x 2 = 4
    - 3 x 3 = 9
    - 4 x 4 = 16 ===> greater than n {stop operation: no perfect square root}
    ===> in this case, return the previous number as the square root, because current number > n 



- MORE EFFICIENT method
- using binary search method O(logN):
    - we divide and conquer values, reducing the numbers we work with to get our answer 

example: 
====> n = 25
    |  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  |
    - find mid number {13}
    |  1 2 3 4 5 6 7 8 9 10 11 12 < 13 > 14 15 16 17 18 19 20 21 22 23 24 25  |
    - 13 * 13 = 169 ===> greater than n {25}
        - definitely any number greater than 13 cannot give 25 when squared 
            - ignore 13 - 25
    |  1 2 3 4 5 6 7 8 9 10 11 12  |
    - find mid number {7}
    |  1 2 3 4 5 6 < 7 > 8 9 10 11 12  |
    - 7 x 7 = 49 ===> greater than n {25}
        - ignore 7 - 12
    |  1 2 3 4 5 6  |
    - find mid number {4}
    |  1 2 3 < 4 > 5 6  |
    - 4 x 4 = 16 ===> less than n {25}
        - ignore 1 - 4
    |  5 6  |
    - find mid number {6}
    |  5 < 6 >  |
    - 6 x 6 = 36 ===> greater than n {25}

    ===> left with only 5
         - 5 x 5 = 25 ====> equal to n {answer}

=====> THIS METHOD IS VERY USEFUL WHEN WORKING WITH EXTREMELY LARGE NUMBER like 25,000,000,000,000